// <auto-generated />
using System;
using EletronicECommerce.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EletronicECommerce.Repository.Migrations
{
    [DbContext(typeof(EletronicECommerceContext))]
    partial class EletronicECommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("EletronicECommerce.Repository.Models.CategoryModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("Pk_Category");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.CustomerModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("Pk_User");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.OrderModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusOrder")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("TypePayment")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("Pk_Order");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.ProductModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id")
                        .HasName("Pk_Product");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.SubModels.AddressModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Number")
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("S/N");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id")
                        .HasName("Pk_Address");

                    b.HasIndex("CustomerId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.SubModels.OrderProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("Pk_OrderProduct");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.SubModels.StockModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("Pk_Stock");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductStock");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id")
                        .HasName("Pk_User");

                    b.ToTable("User");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.CustomerModel", b =>
                {
                    b.HasOne("EletronicECommerce.Repository.Models.UserModel", "User")
                        .WithOne("Customer")
                        .HasForeignKey("EletronicECommerce.Repository.Models.CustomerModel", "UserId")
                        .HasConstraintName("Fk_User_Costumer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.OrderModel", b =>
                {
                    b.HasOne("EletronicECommerce.Repository.Models.UserModel", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Fk_Order_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.ProductModel", b =>
                {
                    b.HasOne("EletronicECommerce.Repository.Models.CategoryModel", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Fk_Category_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.SubModels.AddressModel", b =>
                {
                    b.HasOne("EletronicECommerce.Repository.Models.CustomerModel", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("Fk_Customer_Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.SubModels.OrderProductModel", b =>
                {
                    b.HasOne("EletronicECommerce.Repository.Models.OrderModel", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("Fk_Order_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EletronicECommerce.Repository.Models.ProductModel", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Fk_Product_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.SubModels.StockModel", b =>
                {
                    b.HasOne("EletronicECommerce.Repository.Models.ProductModel", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Fk_Product_Stock");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.CategoryModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.CustomerModel", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.OrderModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.ProductModel", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("EletronicECommerce.Repository.Models.UserModel", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
